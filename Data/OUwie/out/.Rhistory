c$max95FL_palms <- NULL
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2)
print(cc)
c$mean_perc_BSchange <- NULL
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2)
print(cc)
correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2)
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
cc <- correlation::correlation(c, corr.method = "pearson", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
cc
c$log_max95FL_palms_BBMmean <- NULL
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
c$presNat_max95BodySize <- NULL
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
summary(cc)
cc_mat <- corr.test(c)$p # save p-values as matrix
cc_mat
cc_mat <- psych::corr.test(c)$p # save p-values as matrix
cc_mat
cc_mat <- do.call(round, psych::corr.test(c)$p) # save p-values as matrix
round(cc_mat)# save p-values as matrix
round(cc_mat,2)# save p-values as matrix
cc_mat <- round(cc_mat,2)# save p-values as matrix
cc_mat <- round(cc_mat,3)# save p-values as matrix
cc_mat
p_cc_mat <- round(cc_mat,3)# save p-values as matrix
cc <- cor(c, use="pairwise.complete.obs") # calculate correlations
cc
symnum(cc)
corPlot(cc, cex = 1.2, pval=T, p.mat = cc_mat, insign = "blank") # Canopy Cover ~ Annual Precipitation = 0.78
library(psych)
corPlot(cc, cex = 1.2, pval=T, p.mat = cc_mat, insign = "blank") # Canopy Cover ~ Annual Precipitation = 0.78
library(corrplot); library(RColorBrewer)
corrplot(cc, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"), insig = "blank", method="circle", p.mat = cc_mat)
library(corrplot); library(RColorBrewer)
corrplot(cc, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"), insig = "blank", method="circle", p.mat = cc_mat)
corrplot(cc, order = 'hclust', addrect = 2, insig = "pch", method = "color", type="")
corrplot(cc, order = 'hclust', addrect = 2, insig = "pch", method = "color")
corPlot(cc, cex = 1.2, pval=T, p.mat = cc_mat, insign = "blank") # Canopy Cover ~ Annual Precipitation = 0.78
summary(cc)
cc <- correlation::correlation(c, corr.method = "spearman", na.deletion = "pairwise", sort.corr =T, show.p = T, decimals = 2, ranktransform = T)
print(cc)
summary(cc)
# Libraries  =======================
library(tidyr); library(dplyr); library(scales); library(viridis); library(viridisLite); library(ggplot2)
setwd(dir = "~/GitHub/FruitsAfrica/Sensitivity_Extinctions/")
# =======================
rm(list = ls())
## New script: plots from OUwie models ~ MCC tree =================================
# 1. Line plots (y = AICweight x = data, color = model)
## 1.1 best fitting models (1. filter for delta = 0, 2. calculate average aicw, 3. plot)
## 1.2 all models (1. group by model, 2. calculate average aicw, 3. plot)
# 2. Line plots (y = theta, x = regime, color = data)
## 2.1 best fitting models (1. filter for delta = 0, 2. group by model (exclude BM1, BMS, OU1?), 3. plot MCC results as means)
## 2.2 all models (1. group by model, 2. plot MCC results as means)
# 2. Line plots (y = sigma, x = regime, color = data)
## 2.1 best fitting models (1. filter for delta = 0, 2. filter for OUMV, OUMVA, 3. plot MCC results as means)
## 2.2 all models (1. group by model, 2. filter for OUMV, OUMVA, 3. plot MCC results as means)
# Libraries  =======================
library(tidyr); library(dplyr); library(scales); library(viridis); library(viridisLite); library(ggplot2)
setwd(dir = "~/GitHub/FruitsAfrica/Sensitivity_Extinctions/")
# =======================
rm(list = ls())
# =======================
# 100 trees results:
Afr_emp <- read.table("raw_avgl_Afr.txt", header=T)
Afr_BBM <- read.table("raw_BM_Afr.txt", header=T)
# negative eigenvalues, odd estimates, negative AICc (convergence problems)
mods3 <- Afr_emp[!is.na(Afr_emp$eigval1) & Afr_emp$eigval1 >= 0 & !is.na(Afr_emp$eigval2) & Afr_emp$eigval2 >= 0 & !is.na(Afr_emp$eigval3) & Afr_emp$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<- mods4 %>% group_by(id) %>% geiger::aicw(mods4$AICc)
mods5<-cbind(mods4, fit)
avgl_processed <- mods5
####
mods3 <- Afr_BBM[!is.na(Afr_BBM$eigval1) & Afr_BBM$eigval1 >= 0 & !is.na(Afr_BBM$eigval2) & Afr_BBM$eigval2 >= 0 & !is.na(Afr_BBM$eigval3) & Afr_BBM$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<-geiger::aicw(mods4$AICc)
mods5<-cbind(mods4, fit)
BBM_processed <- mods5
####
head(avgl_processed)
str(avgl_processed)
str(Afr_emp)
# Convergence Problems:
unique(Afr_emp$model)
unique(avgl_processed$model)
issues<-setdiff(Afr_emp,avgl_processed[,1:18])
issues
BBM_processed <- mods5
head(avgl_processed)
str(avgl_processed)
str(Afr_emp)
# 100 trees results:
Afr_emp <- read.table("raw_avgl_Afr.txt", header=T)
Afr_BBM <- read.table("raw_BM_Afr.txt", header=T)
# negative eigenvalues, odd estimates, negative AICc (convergence problems)
mods3 <- Afr_emp[!is.na(Afr_emp$eigval1) & Afr_emp$eigval1 >= 0 & !is.na(Afr_emp$eigval2) & Afr_emp$eigval2 >= 0 & !is.na(Afr_emp$eigval3) & Afr_emp$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<- mods4 %>% group_by(id) %>% geiger::aicw(mods4$AICc)
mods5<-cbind(mods4, fit)
avgl_processed <- mods5
mods3 <- Afr_BBM[!is.na(Afr_BBM$eigval1) & Afr_BBM$eigval1 >= 0 & !is.na(Afr_BBM$eigval2) & Afr_BBM$eigval2 >= 0 & !is.na(Afr_BBM$eigval3) & Afr_BBM$eigval3 >= 0,]
# negative eigenvalues, odd estimates, negative AICc (convergence problems)
mods3 <- Afr_emp[!is.na(Afr_emp$eigval1) & Afr_emp$eigval1 >= 0 & !is.na(Afr_emp$eigval2) & Afr_emp$eigval2 >= 0 & !is.na(Afr_emp$eigval3) & Afr_emp$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<- mods4 %>% group_by(id) %>% geiger::aicw(mods4$AICc)
mods4
geiger::aicw(mods4$AICc)
# Model comparison: calculate AICc weights
fit<- mods4 %>% deplyr::group_by(id) %>% geiger::aicw(mods4$AICc)
fit
mods3 <- Afr_BBM[!is.na(Afr_BBM$eigval1) & Afr_BBM$eigval1 >= 0 & !is.na(Afr_BBM$eigval2) & Afr_BBM$eigval2 >= 0 & !is.na(Afr_BBM$eigval3) & Afr_BBM$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<-geiger::aicw(mods4$AICc)
mods5<-cbind(mods4, fit)
# Libraries  =======================
library(tidyr); library(dplyr); library(scales); library(viridis); library(viridisLite); library(ggplot2)
setwd(dir = "~/GitHub/FruitsAfrica/Sensitivity_Extinctions/")
# =======================
rm(list = ls())
# 100 trees results:
Afr_emp <- read.table("raw_avgl_Afr.txt", header=T)
Afr_BBM <- read.table("raw_BM_Afr.txt", header=T)
Afr_emp
Afr_BBM
# negative eigenvalues, odd estimates, negative AICc (convergence problems)
mods3 <- Afr_emp[!is.na(Afr_emp$eigval1) & Afr_emp$eigval1 >= 0 & !is.na(Afr_emp$eigval2) & Afr_emp$eigval2 >= 0 & !is.na(Afr_emp$eigval3) & Afr_emp$eigval3 >= 0,]
mods4 <- mods3[mods3$theta0 >= 0 & mods3$theta_1 >=0,]
mods4 <- mods4[mods4$AICc > 0,]
# Model comparison: calculate AICc weights
fit<- mods4 %>% deplyr::group_by(id) %>% geiger::aicw(mods4$AICc)
mods4 %>% deplyr::group_by(id) %>% geiger::aicw(mods4$AICc)
mods4
mods4 %>% deplyr::group_by(id)
# Model comparison: calculate AICc weights
fit<- mods4 %>% dplyr::group_by(id) %>% geiger::aicw(mods4$AICc)
mods4 %>% dplyr::group_by(id)
geiger::aicw(mods4$AICc)
mods4 %>% dplyr::group_by(id) %>% geiger::aicw(mods4$AICc)
mods4 %>% dplyr::group_by(id) %>%   summarise_at(vars(AICc), list(name = mean))
# Model comparison: calculate AICc weights
fit<- mods4 %>% dplyr::group_by(id) %>%   summarise_at(vars(AICc), list(fit = geiger::aicw(AICc)))
# Model comparison: calculate AICc weights
fit<- mods4 %>% dplyr::group_by(id) %>%   summarise_at(vars(AICc), list(fit = geiger::aicw(mods4$AICc)))
setwd("~/GitHub/FruitsAfrica/Data/OUwie/out")
Afr_avgl <- read.table("issues_AVGL.txt", header=T)
Afr_BM <- read.table("issues_BM.txt", header=T)
Afr_avgl$regime <- "Africa"
Afr_avgl$dat <- "empirical"
Afr_BM$regime <- "Africa"
Afr_BM$dat <- "simulated"
Afr_avgl$group <- "Afr_emp"
Afr_BM$group <- "Afr_BM"
Africa <- merge(Afr_avgl, Afr_BM, all=T)
str(Africa)
###############################################################################
library(dplyr)
library(rstatix)
library(ggplot2)
Africa %>% filter(dat == "empirical") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
ylim(0, 105)+
labs(x = "Evolutionary Trait Models",
y = "Proportion of convergence failures",
title ="a) Observed fruit sizes ")+
theme_classic()
Africa %>% filter(dat == "simulated") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
ylim(0, 105)+
labs(x = "Evolutionary Trait Models",
y = "Proportion of convergence failures",
title ="a) Simulated fruit sizes ")+
theme_classic()
Africa %>% filter(dat == "empirical") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)
Africa
Africa %>% filter(dat == "empirical") %>%
ggplot(aes(x = factor(model)))
Africa %>% filter(dat == "empirical")
str(Africa)
Afr_avgl <- read.table("issues_AVGL.txt", header=T, stringsAsFactors = T)
Afr_BM <- read.table("issues_BM.txt", header=T, stringsAsFactors = )
Afr_BM <- read.table("issues_BM.txt", header=T, stringsAsFactors = T)
Afr_avgl$regime <- "Africa"
Afr_avgl$dat <- "empirical"
Afr_BM$regime <- "Africa"
Afr_BM$dat <- "simulated"
Afr_avgl$group <- "Afr_emp"
Afr_BM$group <- "Afr_BM"
Africa <- merge(Afr_avgl, Afr_BM, all=T)
str(Africa)
Afr_avgl$regime <- factor("Africa")
Afr_avgl$dat <- factor("empirical")
Afr_BM$regime <- factor("Africa")
Afr_BM$dat <- factor("simulated")
Afr_avgl$group <- factor("Afr_emp")
Afr_BM$group <- factor("Afr_BM")
Africa <- merge(Afr_avgl, Afr_BM, all=T)
str(Africa)
###############################################################################
library(dplyr)
library(rstatix)
library(ggplot2)
Africa %>% filter(dat == "empirical") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
ylim(0, 105)+
labs(x = "Evolutionary Trait Models",
y = "Proportion of convergence failures",
title ="a) Observed fruit sizes ")+
theme_classic()
dev.off()
Africa %>% filter(dat == "empirical") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
ylim(0, 105)+
labs(x = "Evolutionary Trait Models",
y = "Proportion of convergence failures",
title ="a) Observed fruit sizes ")+
theme_classic()
Africa %>% filter(dat == "simulated") %>%
ggplot(aes(x = factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(NULL, limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
ylim(0, 105)+
labs(x = "Evolutionary Trait Models",
y = "Proportion of convergence failures",
title ="b) Simulated fruit sizes ")+
theme_classic()
# Libraries  =======================
library(tidyr); library(dplyr); library(scales); library(viridis); library(viridisLite); library(ggplot2)
setwd(dir = "~/GitHub/FruitsAfrica/Data/OUwie/out/")
# =======================
rm(list = ls())
# ===============
# 100 trees results:
Afr_emp <- read.table("merged_data_AVGL.txt", header=T)
Afr_BBM <- read.table("merged_data_BM.txt", header=T)
# MCC results:
MCC <- read.table("merged_MCC_all.txt", header=T)
# make data id column (empirical, simulated)
Afr_emp$data <- "empirical"
Afr_BBM$data <- "simulated"
MCC <- MCC %>% mutate(data = ifelse(id %in% c("ouwie_Afr_BM", "ouwie_md_BM"), "simulated", "empirical"))
unique(MCC$id)
# make regime id column (Africa/Elsewhere, Moist/Dry)
Afr_emp$regime <- "Megafauna"
Afr_BBM$regime <- "Megafauna"
MCC <- MCC %>% mutate(regime = ifelse(id %in% c("ouwie_Afr_BM", "ouwie_Afr_avgl"), "Megafauna", "Vegetation"))
# make MCC/set id column (MCC, set_trees)
Afr_emp$tree <- "set_trees"
Afr_BBM$tree <- "set_trees"
MCC$tree <- "MCC"
# merge different regimes seperately
MCC_afr<-MCC %>% filter(regime == "Megafauna")
Afr_merged <- merge(Afr_emp, Afr_BBM, all=T)
Afr_merged <- merge(Afr_merged, MCC_afr, all=T)
all_merged_wide <- Afr_merged %>% filter(regime == "Megafauna")
# transform parameters to long-format
## megafauna:
data_long_Afr <- gather(Afr_merged, parameter, value, c(theta0, theta_1, theta_se0, theta_se_1, sigma0, X1_sigma.sq, X0_alpha, X1_alpha), factor_key=TRUE)
str(data_long_Afr)
head(data_long_Afr)
# round values
data_long_Afr$value <- round(as.numeric(data_long_Afr$value),3)
data_long_Afr$w <- round(data_long_Afr$w, 2)
data_long_Afr$delta <- round(data_long_Afr$delta, 2)
# merge to masterfile ============================================================
dd_master <- data_long_Afr
head(dd_master)
summary(dd_master)
str(dd_master)
dd_master$data <- as.factor(dd_master$data)
dd_master$regime <- as.factor(dd_master$regime)
dd_master$tree <- as.factor(dd_master$tree)
# dataframes grouped by variables:
## megafauna
data_long_Afr_sep <- gather(Afr_merged, g_logTheta, v_logTheta, c(theta0, theta_1), factor_key=TRUE)
data_long_Afr_sep <- gather(data_long_Afr_sep, g_logThetaSE, v_logThetaSE, c(theta_se0, theta_se_1), factor_key=TRUE)
data_long_Afr_sep <- gather(data_long_Afr_sep, g_sigma, v_sigma, c(sigma0, X1_sigma.sq), factor_key=TRUE)
data_long_Afr_sep <- gather(data_long_Afr_sep, g_alpha, v_alpha, c(X0_alpha, X1_alpha), factor_key=TRUE)
head(data_long_Afr_sep)
# merge to parameter seperated masterfile ============================================================
dd_master_sep <- data_long_Afr_sep
head(dd_master_sep)
summary(dd_master_sep)
str(dd_master_sep)
dd_master_sep$data <- as.factor(dd_master_sep$data)
dd_master_sep$regime <- as.factor(dd_master_sep$regime)
dd_master_sep$tree <- as.factor(dd_master_sep$tree)
dd_master_bestfit_sep <- subset(dd_master_sep, delta==0)
head(dd_master_bestfit_sep)
multi_theta <- dd_master_bestfit_sep %>% filter(model %in% c("OUM", "OUMV", "OUMVA", "OUMA"), data == "empirical")
multi_sigma <- dd_master_bestfit_sep %>% filter(model %in% c("OUMV", "OUMVA", "BMS"), data == "empirical")
afr_multi_theta <- multi_theta %>% filter(regime == "Megafauna")
afr_multi_theta_MCC <- afr_multi_theta %>% filter(tree == "MCC")
afr_multi_sigma <- multi_sigma %>% filter(regime == "Megafauna")
afr_multi_sigma_MCC <- afr_multi_sigma %>% filter(tree == "MCC")
# ================================================================================
MCC_best <- MCC %>% filter(delta == 0)
all_best <- all_merged_wide %>% filter(delta==0)
multi_theta <- all_best %>% filter(model %in% c("OUM", "OUMV", "OUMVA", "OUMA"))
multi_sigma <- all_best %>% filter(model %in% c("OUMV", "OUMVA"))
## Fig 1: proportion of selected models ===============
dd_Afr <- Afr_merged
group.colors <- c( OUM = "#cdcdcd", OUMV = "#cdcdcd", OUMVA = "#cdcdcd")
empty_models <-c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA")
aicw_emp <- dd_Afr %>%
filter(delta==0 & data == "empirical" & tree == "set_trees") %>% group_by(model) %>%  summarise_at(vars(w), list(mean = mean, sd = sd))
aicw_emp$mean <- round(aicw_emp$mean,2)
aicw_emp$y <- c(85, 18, 4)
aicw_sim <- dd_Afr %>%
filter(delta==0 & data == "simulated" & tree == "set_trees") %>% group_by(model) %>%  summarise_at(vars(w), list(mean = mean, sd = sd))
aicw_sim$mean <- round(aicw_sim$mean,2)
aicw_sim
aicw_sim$y <- c(69, 20, 12, 8)
aicw_MCC <- all_merged_wide %>% filter(delta==0 & tree == "MCC") %>% group_by(data, regime, model) %>%  summarise_at(vars(w), list(mean = mean, sd = sd))
aicw_MCC$mean <- round(aicw_MCC$mean,2)
aicw_MCC
sum_tab <- all_merged_wide %>% filter(delta==0) %>% group_by(tree, data, model) %>% dplyr::summarize(
n = n(),
alpha0 = mean(X0_alpha) ,
alpha1 = mean(X1_alpha),
sigma0 = mean(sigma0),
sigma1 = mean(X1_sigma.sq),
theta0 = mean(theta0),
theta1 = mean(theta_1),
aicw = mean(w)
)
write.csv(sum_tab, "../../../Results/OUwie_SumTab_AfrOnly.csv")
# =============================================
library("ggrepel")
p2_1<-dd_Afr %>%
filter(delta==0 & data == "empirical") %>%
ggplot(aes( x=factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(text= element_text(color="black"),
title=element_text(size=15, color = "black"),
axis.text=element_text(size=11.5, color = "black"),
axis.text.x = element_text(angle = 45, hjust = 1, size=15, color="black"),
axis.title.x = element_text(size=15, color="black"),
axis.text.y = element_text(size=15, color="black"),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
#geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 6)+
geom_text(data = aicw_emp, aes(x=model, y=y, label = paste("w =", mean), vjust=0.3)) +
ylim(0, 100)+
theme_classic()+
labs(x = "Evolutionary Trait Models",
y = "Proportion of selected models",
title ="a) Observed fruit sizes ")
p2_1
p2_2<-dd_Afr %>%
filter(delta==0 & data == "simulated") %>%
ggplot(aes( x=factor(model)))+
geom_bar(width=.7, position="dodge2")+
scale_x_discrete(limits = c("BM1", "BMS", "OU1", "OUM", "OUMV", "OUMA", "OUMVA"), drop = FALSE)+
theme(title=element_text(size=15),
axis.text.x = element_text(angle = 45, hjust = 1, size=15),
axis.title.x = element_text(size=15),
axis.text.y = element_text(size=15),
axis.title.y = element_text(size=15),
legend.title = element_text(size=15),
legend.text = element_text(size=10))+
#geom_text(aes(label = ifelse(..count.. > 0, paste0("n = ", ..count..), "")),  stat = "count", nudge_y = 3)+
geom_text(data = aicw_sim, aes(x=model, y=y, label = paste("w =", mean), vjust=0.3)) +
ylim(0, 100)+
theme_classic()+
labs(x = "Evolutionary Trait Models",
y = "Proportion of selected models",
title ="b) Simulated fruit sizes")
p2_2
pdf("Fig1_Count_selectedModels_grid.pdf",width=5, height=6)
gridExtra::grid.arrange(p2_1,p2_2)
dev.off()
group.colors <- c(theta0 = "#636363", theta_1 = "blue")
afr_multi_theta$g_logTheta <- factor(afr_multi_theta$g_logTheta, levels = c("theta_1", "theta0"))
p3 <- ggplot(data=afr_multi_theta, aes(y = v_logTheta, x = g_logTheta), show.legend=F)+
geom_point(aes(color=g_logTheta), cex = 2)+
geom_line(aes(group=id), col="light grey")+
scale_x_discrete(name =NULL,
labels=c("theta0" = "Elsewhere", "theta_1" = "Africa"))+
theme_classic()+
theme(legend.position = "none")+
scale_y_continuous(name = expression(theta~"log(Optimum fruit size) [cm]"))+
scale_color_manual("Parameters", labels = c("Theta0", "Theta1"), values = group.colors)+
geom_point(data = afr_multi_theta_MCC, aes(y = v_logTheta, x = g_logTheta), cex =2)+
geom_line(data= afr_multi_theta_MCC, aes(group = id), col="black")+
labs(subtitle = expression(bold(Observed)~n[OUM]~'= 82,'~n[OUMV]~'= 16,'~n[OUMVA]~'= 2'~~'\r\n'))+
theme(legend.position="none")+
theme( plot.subtitle= element_text(size=9),
axis.text=element_text(size=13, color = "black"), #change font size of axis text
axis.title=element_text(size=13), #change font size of axis titles
plot.title=element_text(size=20),
text = element_text(size = 13), #change font size of plot title
legend.text=element_text(size=20), #change font size of legend text
legend.title=element_text(size=20),
plot.margin = margin(t = 12,  # Top margin
r = 12,  # Right margin
b = 12,  # Bottom margin
l = 12)) # Left margin) #change font size of legend title
### =======================================
group.colors <- c(X1_sigma.sq = "blue",sigma0 = "#636363")
afr_multi_theta$g_sigma <- factor(afr_multi_theta$g_sigma, levels = c("X1_sigma.sq", "sigma0"))
p5 <- ggplot(data=afr_multi_sigma, aes(y = v_sigma, x = g_sigma), show.legend=F)+
geom_point(aes(color=g_sigma), cex = 3)+
geom_line(aes(group=id), col="light grey")+
scale_x_discrete(name =NULL,
limits = c("X1_sigma.sq", "sigma0"),
labels=c("X1_sigma.sq" = "Africa", "sigma0" = "Elsewhere"))+
theme_classic()+
#theme(legend.position = "none")+
scale_y_continuous(name =expression(sigma^2~"Evolutionary rate"))+
scale_color_manual("Parameters", labels = c("Africa", "Elsewhere"), values = group.colors)+
geom_point(data = afr_multi_sigma_MCC, aes(y = v_sigma, x = g_sigma), cex =3)+
geom_line(data= afr_multi_sigma_MCC, aes(group = id), col="black")+
labs(subtitle = expression(bold(Observed)~n[OUMV]~'= 16,'~n[OUMVA]~'= 2'~~'\r\n'))+
theme(legend.position="none")+
theme( plot.subtitle= element_text(size=9),
axis.text=element_text(size=13, color = "black"), #change font size of axis text
axis.title=element_text(size=13), #change font size of axis titles
plot.title=element_text(size=20),
text = element_text(size = 13), #change font size of plot title
legend.text=element_text(size=20), #change font size of legend text
legend.title=element_text(size=20),
plot.margin = margin(t = 12,  # Top margin
r = 12,  # Right margin
b = 12,  # Bottom margin
l = 12)) # Left margin) #change font size of legend title
p5
p5
p2_2
dev.off()
p2_2
